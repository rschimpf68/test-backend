// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  userId     Int        @id @default(autoincrement())
  username   String
  email      String
  password   String
  categories Category[]
  expenses   Expense[]
  incomes    Income[]
  tasks      Task[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Task {
  taskId      Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime @default(now())
  authorId    Int
  author      User     @relation(fields: [authorId], references: [userId], onDelete: Cascade)
}

model Category {
  categoryId Int       @id @default(autoincrement())
  name       String
  limitation Float     @default(0)
  isOutflow  Boolean
  icon       String?
  userId     Int
  User       User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Income     Income[]
  Expense    Expense[]

  @@index([userId])
}

model Income {
  incomeId    Int      @id @default(autoincrement())
  description String
  amount      Float
  date        DateTime
  userId      Int
  User        User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  categoryId  Int
  Category    Category @relation(fields: [categoryId], references: [categoryId], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([categoryId])
  @@index([userId])
}

model Expense {
  expenseId   Int      @id @default(autoincrement())
  description String
  amount      Float
  date        DateTime
  userId      Int
  User        User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  categoryId  Int
  Category    Category @relation(fields: [categoryId], references: [categoryId], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([categoryId])
  @@index([userId])
}
